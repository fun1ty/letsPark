<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="/reset.css" />
    <link rel="stylesheet" type="text/css" href="/chat.css" />
    <link rel="stylesheet" type="text/css" href="/font.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <title>채팅</title>
  </head>

  <body>
    <div id="chatHeader">
      <button id="chatExit" onclick="exitChat()">
        <img
          id="backBtnImg"
          src="https://kdt8-cs.s3.ap-northeast-2.amazonaws.com/%EC%A3%BC%EC%B0%A8%ED%95%98%EC%B9%B4_icon/Vector.svg"
        />
      </button>
      <h2 id="chatParkName"><%= parkingName %></h2>
    </div>
    <hr />
    <div id="main">
      <ul id="lists"></ul>
    </div>
    <div class="body">
      <div id="date"></div>
      <!-- <div id="notice"></div> -->
      <div id="chatHistory"></div>
      <div id="msg">
        <!-- <div class="upload_box"></div> -->
      </div>

      <form id="chat">
        <input type="text" id="message" placeholder="메세지 입력" />
        <button id="chatSendBtn">
          <img
            id="chatSendBtnImg"
            src="https://kdt8-cs.s3.ap-northeast-2.amazonaws.com/%EC%A3%BC%EC%B0%A8%ED%95%98%EC%B9%B4_icon/Cursor.svg"
          />
        </button>
      </form>
    </div>
    <!-- <form onsubmit="fileupload(event)">
        <input type="file" id="files" multiple /><br />
      </form> -->

    <script>
      let roomId = "<%= roomId %>";
      const requestUserId = "<%= userId %>";
      const joinUserNick = "<%= joinUserNick %>";
      const parkingName = "<%= parkingName %>";
      const dateNotice = document.querySelector("#date");
      console.log("roomId", roomId);
      console.log("requestUserId", requestUserId);
      console.log("joinUserNick", joinUserNick);
      console.log("parkingName", parkingName);

      const socket = io();
      let userid;
      let usernick;
      console.log(socket);
      const token = localStorage.getItem("token");
      const chatForm = document.querySelector("#chat");
      const msg = document.querySelector("#msg");
      const notice = document.querySelector("#notice");
      const sendUserh2 = document.querySelector("#sendUser");
      const historyChatDiv = document.querySelector("#chatHistory");

      let lastMessageId = null;
      let chatHistoryRequested = false;

      //날짜 구하기
      const week = ["일", "월", "화", "수", "목", "금", "토"];
      let now = new Date();
      let year = now.getFullYear();
      let month = now.getMonth() + 1;
      let date = now.getDate();
      let day = now.getDay();
      let today = year + "년" + month + "월" + date + "일" + week[day] + "요일";
      dateNotice.textContent = today;
      console.log(dateNotice);

      //jwt토큰검증
      socket.emit("jwt", { token }, () => {});
      socket.on("jwt", (resultValue) => {
        userid = resultValue.id;
        usernick = resultValue.nickname;
        const getItem = localStorage.getItem("userid");
        if (getItem === null || getItem.length == 0) {
          localStorage.setItem("userid", resultValue.id);
        }

        //채팅방 생성
        socket.emit(
          "create",
          userid,
          usernick,
          roomId,
          requestUserId,
          joinUserNick,
          parkingName,
          () => {}
        );
      });

      //방 번호
      socket.on("roomNumber", (roomNumber) => {
        const getItem = localStorage.getItem("userid");
        console.log("getItem", getItem);
        console.log(roomId);
        if (!roomId) {
          roomId = roomNumber;
        }

        //채팅내역 불러오기
        socket.emit("findHistory", roomNumber, getItem, lastMessageId);
      });

      //채팅내역
      socket.on("history", (historyChat, UserResult) => {
        console.log("historyChat", historyChat[0], chatHistoryRequested);

        if (historyChat && historyChat.length > 0) {
          for (let i = 0; i < historyChat.length; i++) {
            const div = document.createElement("div");
            const p = document.createElement("p");
            const time = document.createElement("p");
            const span = document.createElement("span");
            const img = document.createElement("img");
            const getItem = localStorage.getItem("userid");
            const chat = historyChat[i];
            // if (chat.id < lastMessageId) {
            //   continue;
            // } else {
            if (chat) {
              if (chatHistoryRequested == false) {
                if (chat.FILE != null) {
                  // 파일이 있는 경우
                  p.innerHTML = chat.FILE;
                } else {
                  p.textContent = chat.content;
                }
                if (chat.userid == getItem) {
                  div.classList.add("my-chat");
                  time.textContent = chat.createdAt;
                  time.id = "chatTime";
                  div.appendChild(time);
                  p.id = "chatText";
                  span.appendChild(p);
                  div.appendChild(span);
                } else {
                  div.classList.add("other-chat");
                  span.innerHTML = `<span id="nick">${UserResult.nickname}</span>`; // 닉네임 추가
                  p.innerHTML = `<p id="othermessage">${chat.content}</p>`;
                  time.textContent = chat.createdAt;
                  time.id = "otherChatTime";
                  img.src = UserResult.profile;
                  img.style.width = "50px";
                  img.id = "profile";
                  span.appendChild(img);
                  span.appendChild(p);
                  span.appendChild(time);
                  div.appendChild(span);
                }
                historyChatDiv.insertBefore(div, historyChatDiv.firstChild);
                lastMessageId = chat.id;
              }
            }
          }
        }
        chatHistoryRequested = true;
        // }
      });

      //메세지 띄우기
      socket.on("newMessage", (message, nick, profile) => {
        console.log("newMessage", message, nick, profile);
        const div = document.createElement("div"); //밖div
        const span = document.createElement("span");
        const p = document.createElement("p");
        const img = document.createElement("img");
        console.log("닉", usernick);

        if (usernick === nick) {
          div.classList.add("my-chat");
        } else {
          div.classList.add("other-chat");
          span.innerHTML = `<span id="nick">${nick}</p>`;
          img.src = `${profile}`;
          img.style.width = "50px";
          span.appendChild(img);
          div.appendChild(span);
        }

        p.id = "chatText";
        p.textContent = `${message}`;
        div.appendChild(p);

        //채팅텍스트
        msg.appendChild(div);
        location.reload();
      });

      // 특정 방에 조인
      socket.emit("joinRoom", roomId, requestUserId, usernick);

      //입장 메세지 이벤트
      socket.on("notice", (roomNumber, message) => {
        console.log("message", message);
        const div = document.createElement("div");
        const p = document.createElement("p");
        p.textContent = message;
        div.appendChild(p);
        // notice.appendChild(div);

        console.log("roomId", roomId);
      });

      //메세지 보내기
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const user = userid;
        const message = document.querySelector("#message");
        const msgData = {
          nick: usernick,
          userid: userid,
          message: message.value,
          file: null,
          roomId: roomId,
          joinUserId: requestUserId,
        };
        socket.emit("sendMessage", msgData);
        const div = document.createElement("div");
        div.classList.add("my-chat");
        const p = document.createElement("p");
        p.textContent = message.val;
        p.id = "chatText";
        div.appendChild(p);
        msg.appendChild(div);
        message.value = "";
      });

      //채팅방 나가기
      function exitChat() {
        chatHistoryRequested = false;
        lastMessageId = null;
        location.href = "/";
      }

      //파일전송
      async function fileupload(e) {
        e.preventDefault();
        //파일에 접근
        const file = document.querySelector("#files");
        const imageInput = document.getElementById("imageInput");

        // 이미지 파일을 선택하지 않은 경우
        if (!imageInput.files || !imageInput.files[0]) {
          return;
        }
        console.log(file.files);
        //폼 데이터 생성
        const formData = new FormData();
        //파일이 여러개이므로 반복문을 사용
        for (let i = 0; i < file.files.length; i++) {
          formData.append("files", file.files[i]);
        }

        try {
          console.log("res");

          const img = document.createElement("img");
          img.src = elem.location; //aws는 location!!
          img.style.width = "500px";
          resultBox.appendChild(img);
        } catch (error) {
          console.log(error);
        }
      }
    </script>
  </body>
</html>
