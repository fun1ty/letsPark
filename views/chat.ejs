<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <title>채팅</title>
  </head>
  <body>
    <div id="main">
      <!-- <form id="room">
        <h1>채팅방</h1>
        <input type="text" id="roomName" placeholder="채팅방 만들기" /> -->
      <!-- <input type="text" id="userName" placeholder="사용자 이름 입력" /> -->
      <!-- <button>만들기</button> -->
      <!-- </form>  -->
      <ul id="lists"></ul>
    </div>
    <div id="body">
      <div id="msg">
        <div id="notice"></div>
      </div>
      <form id="chat">
        <!-- <select id="userList"></select> -->
        <input type="text" id="message" placeholder="메세지 입력" />
        <button>입력</button>
      </form>
    </div>

    <script>
      const socket = io();
      const userid = "dfdf";
      const usernick = "영치코";
      console.log(socket);
      const roomForm = document.querySelector("#room");
      const chatForm = document.querySelector("#chat");
      const msg = document.querySelector("#msg");
      const notice = document.querySelector("#notice");

      let myName;

      //룸리스트
      socket.on("roomList", (roomLists) => {
        console.log(roomLists);
      });

      //메세지 띄우기
      socket.on("newMessage", (message, nick, bool) => {
        console.log(message, nick);
        const div = document.createElement("div"); //밖div
        const p = document.createElement("p"); //안쪽p
        console.log("닉", myName);
        if (myName === nick) {
          div.classList.add("my-chat");
        } else {
          div.classList.add("other-chat");
        }
        if (bool) {
          div.classList.add("secret-chat");
        }
        //채팅텍스트
        p.textContent = `${nick} : ${message}`;
        div.appendChild(p);
        msg.appendChild(div);
      });
      //입장 메세지 이벤트
      socket.on("notice", (message) => {
        const div = document.createElement("div");
        const p = document.createElement("p");
        p.textContent = message;
        div.appendChild(p);
        notice.appendChild(div);
      });

      //채팅방 생성
      socket.emit("create", userid, usernick, () => {});
      socket.on("create", (message, bool) => {
        if (bool === false) {
          alert(message);
          socket.leave(socket.room);
        }
      });

      //메세지 보내기
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const user = userid;
        const message = document.querySelector("#message");
        console.log(user.value);
        const msg = {
          nick: usernick,
          userid: userid,
          message: message.value,
        };
        socket.emit("sendMessage", msg);
        message.value = "";
      });
    </script>
  </body>
</html>
